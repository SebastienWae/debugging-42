"use strict";(self.webpackChunk_42_debuggers=self.webpackChunk_42_debuggers||[]).push([[80],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(a),m=l,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||r;return a?n.createElement(h,i(i({ref:t},u),{},{components:a})):n.createElement(h,i({ref:t},u))}));function m(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var c=2;c<r;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},3217:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var n=a(7462),l=(a(7294),a(3905));const r={sidebar_position:1},i="Clang Static Analyzer",o={unversionedId:"static-analyzers/clang_static_analyzer",id:"static-analyzers/clang_static_analyzer",title:"Clang Static Analyzer",description:"Static analyzer are not magic, they will not catch all errors and can report false positives.",source:"@site/docs/static-analyzers/clang_static_analyzer.md",sourceDirName:"static-analyzers",slug:"/static-analyzers/clang_static_analyzer",permalink:"/debugging-42/static-analyzers/clang_static_analyzer",draft:!1,editUrl:"https://github.com/SebastienWae/debugging-42/main/docs/static-analyzers/clang_static_analyzer.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"defaultSidebar",previous:{title:"Static Analyzers",permalink:"/debugging-42/category/static-analyzers"},next:{title:"GCC Static Analyzer",permalink:"/debugging-42/static-analyzers/gcc_static_analyzer"}},s={},c=[{value:"Scan-Build",id:"scan-build",level:2},{value:"Scanning files",id:"scanning-files",level:3},{value:"Viewing the results",id:"viewing-the-results",level:3},{value:"Example",id:"example",level:3},{value:"CodeChecker",id:"codechecker",level:2},{value:"Instalation",id:"instalation",level:3},{value:"Compilation database",id:"compilation-database",level:3},{value:"Analyze",id:"analyze",level:3},{value:"Cross Translation Unit Analysis",id:"cross-translation-unit-analysis",level:4},{value:"Parse",id:"parse",level:3},{value:"Visual Studio Code",id:"visual-studio-code",level:3},{value:"Resources",id:"resources",level:2}],u=(p="Iframe",function(e){return console.warn("Component "+p+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",e)});var p;const d={toc:c};function m(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"clang-static-analyzer"},"Clang Static Analyzer"),(0,l.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Static analyzer are not magic, they will not catch all errors and can report false positives."))),(0,l.kt)("p",null,"Clang Static Analyzer can help you find issues such as:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Uninitialized arguments"),(0,l.kt)("li",{parentName:"ul"},"Division by zero"),(0,l.kt)("li",{parentName:"ul"},"Null function pointer"),(0,l.kt)("li",{parentName:"ul"},"Dereferences of null pointers")),(0,l.kt)("p",null,"On top of the default checker, you can also toggle some experimental checkers that can help find your more bugs. (for a list of all options refer to the Clang manual)"),(0,l.kt)("p",null,"You can use Clang static analyzer directly through Clang flags system, but the more ergonomic way is through tools such as Scan-Build or CodeChecker."),(0,l.kt)("h2",{id:"scan-build"},"Scan-Build"),(0,l.kt)("p",null,"Scan-Build is the old but also simplest way to use Clang Static Analyzer, no installation needed as it's part of the LLVM project."),(0,l.kt)("h3",{id:"scanning-files"},"Scanning files"),(0,l.kt)("p",null,"It works by replacing the ",(0,l.kt)("inlineCode",{parentName:"p"},"CC")," of ",(0,l.kt)("inlineCode",{parentName:"p"},"CXX")," variable in your build system. No need to change your Makefile, you only need to pass your build command as an argument:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ scan-build make\n")),(0,l.kt)("p",null,"For a smaller project, you can also pass your compilation command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ scan-build gcc -c my_code.c\n")),(0,l.kt)("h3",{id:"viewing-the-results"},"Viewing the results"),(0,l.kt)("p",null,"The terminal output of ",(0,l.kt)("inlineCode",{parentName:"p"},"scan-build")," is quite sparse, but you can generate HTML files that give you more information. "),(0,l.kt)("p",null,"By default, the files are saved in the ",(0,l.kt)("inlineCode",{parentName:"p"},"/tmp")," directory and can be opened with the ",(0,l.kt)("inlineCode",{parentName:"p"},"scan-view")," command. You can also choose a different directory with the ",(0,l.kt)("inlineCode",{parentName:"p"},"-o")," flag or automatically open the HTML files with the ",(0,l.kt)("inlineCode",{parentName:"p"},"-V")," flag."),(0,l.kt)("h3",{id:"example"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"// bad_code.c\n#include <stdlib.h>\n\nstruct link { struct link *next; };\n\nvoid free_a_list_badly(struct link *n)\n{\n  while (n) {\n    free(n);\n    n = n->next;\n  }\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ scan-build clang -c bad_code.c\nscan-build: Using '/usr/bin/clang-13' for static analysis\nbad_code.c:9:9: warning: Use of memory after it is freed [unix.Malloc]\n    n = n->next;\n        ^~~~~~~\n1 warning generated.\nscan-build: Analysis run complete.\nscan-build: 1 bug found.\nscan-build: Run 'scan-view /tmp/scan-build-2022-06-19-123309-28897-1' to examine bug reports.\n")),(0,l.kt)(u,{url:"/reports/scan-build.html",mdxType:"Iframe"}),(0,l.kt)("h2",{id:"codechecker"},"CodeChecker"),(0,l.kt)("p",null,"CodeChecker is the more modern way to interact with Clang Static Analyzer. It has more features, a better interface and can even work with multiple languages (such as Java, Python, JS)."),(0,l.kt)("p",null,"It\u2019s a very complex tool, so we will only cover the basis. For more information, you can read their ",(0,l.kt)("a",{parentName:"p",href:"https://codechecker.readthedocs.io"},"documentation"),"."),(0,l.kt)("h3",{id:"instalation"},"Instalation"),(0,l.kt)("p",null,"On 42's macOS, the easiest way to install CodeChecker is through pip:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ pip3 install --user codechecker\n")),(0,l.kt)("p",null,"It can also be built from source: ",(0,l.kt)("a",{parentName:"p",href:"https://codechecker.readthedocs.io/en/latest/install_macosx/"},"https://codechecker.readthedocs.io/en/latest/install_macosx/")),(0,l.kt)("h3",{id:"compilation-database"},"Compilation database"),(0,l.kt)("p",null,"Before being able to use CodeChecker you need to create a compilation database. It\u2019s a JSON file that lists all the required commands to build your project."),(0,l.kt)("p",null,"Build tools like CMake can auto-generate it, but for Makefiles you will need an extra utility."),(0,l.kt)("p",null,"Even though CodeChecker can build it on its own with the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'$ CodeChecker log --build "make" --output ./compile_commands.json\n')),(0,l.kt)("p",null,"It can output inaccurate results, so I recommend using ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/rizsotto/Bear"},"Bear"),", that can be installed with ",(0,l.kt)("a",{parentName:"p",href:"https://brew.sh"},"Homebrew")," and is very easy to use."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ brew install bear\n$ bear -- make\n")),(0,l.kt)("h3",{id:"analyze"},"Analyze"),(0,l.kt)("p",null,"CodeChecker offers a lot of customization regarding the analyses available. We won\u2019t go in details into them here but they have a very detailed ",(0,l.kt)("a",{parentName:"p",href:"https://codechecker.readthedocs.io"},"documentation")," if you are interested."),(0,l.kt)("p",null,"Once your compilation database is ready, and every time you want to check your code, you will have to analyze it."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ CodeChecker analyze --ctu ./compile_commands.json --output ./reports\n")),(0,l.kt)("h4",{id:"cross-translation-unit-analysis"},"Cross Translation Unit Analysis"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"--ctu")," flag enable Cross Translation Unit (CTU) Analysis, which is not available with Scan-Build."),(0,l.kt)("p",null,"In simple terms, it will allow error checking for code that is not written in the same file."),(0,l.kt)("p",null,"For example, without CTU, it would not catch the division by zero in the following example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"// foo.c\nint bar();\n\nint foo() {\n  return 3 / bar();\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"// bar.c\nint bar() {\n  return 0;\n}\n")),(0,l.kt)("h3",{id:"parse"},"Parse"),(0,l.kt)("p",null,"Now that your code has been analyzed, you can output the results into different format. By default it will print in your terminal."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ CodeChecker parse ./reports\nFound no defects in foo.c\nFound no defects in ctu.c\n[HIGH] /home/seb/tmp/ex/ctu.c:5:12: Division by zero [core.DivideZero]\n  return 3 / foo();\n           ^\n\nFound 1 defect(s) in ctu.c\n\n\n----==== Severity Statistics ====----\n----------------------------\nSeverity | Number of reports\n----------------------------\nHIGH     |                 1\n----------------------------\n----=================----\n\n----==== Checker Statistics ====----\n----------------------------------------------\nChecker name    | Severity | Number of reports\n----------------------------------------------\ncore.DivideZero | HIGH     |                 1\n----------------------------------------------\n----=================----\n\n----==== File Statistics ====----\n-----------------------------\nFile name | Number of reports\n-----------------------------\nctu.c     |                 1\n-----------------------------\n----=================----\n\n----======== Summary ========----\n---------------------------------------------\nNumber of processed analyzer result files | 4\nNumber of analyzer reports                | 1\n---------------------------------------------\n----=================----\n")),(0,l.kt)("p",null,"You can also make it create HTML files for better readability."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ CodeChecker parse --export html --output ./reports_html ./reports\n")),(0,l.kt)(u,{url:"/reports/codechecker/index.html",mdxType:"Iframe"}),(0,l.kt)("p",null,"Other output formats are available, as well as the possibility to save the reports in DB but we will not cover them here."),(0,l.kt)("h3",{id:"visual-studio-code"},"Visual Studio Code"),(0,l.kt)("p",null,"CodeChecker also has an extension for Visual Studio Code, it will automatically scan the file you are editing and highlight the error it founds."),(0,l.kt)("p",null,"The detailed reports are shown in the sidebar."),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=codechecker.vscode-codechecker"},"https://marketplace.visualstudio.com/items?itemName=codechecker.vscode-codechecker")),(0,l.kt)("p",null,(0,l.kt)("img",{parentName:"p",src:"https://github.com/Ericsson/CodeCheckerVSCodePlugin/raw/HEAD/media/codechecker-splash.png",alt:"img"})),(0,l.kt)("h2",{id:"resources"},"Resources"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://clang.llvm.org/docs/ClangStaticAnalyzer.html"},"https://clang.llvm.org/docs/ClangStaticAnalyzer.html")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://clang-analyzer.llvm.org"},"https://clang-analyzer.llvm.org")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://clang-analyzer.llvm.org/scan-build.html"},"https://clang-analyzer.llvm.org/scan-build.html"))))}m.isMDXComponent=!0}}]);